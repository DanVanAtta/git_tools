function usage() {
  echo "Usage: $(basename $0) <branch_name> <file_name(s)>"
  echo "  branch_name: name of the new branch to create"
  echo "  file_name(s): space delimited list of unique file names, each one is found and added to a commit"
  echo ""
  echo "This script creates checks out a new branch and then commits a list of files to it"
  echo "It is interactive and will prompt you if you want to diff the files, and push and then delete the local branch."
  exit -1
}

BRANCH_NAME=$1
shift

ARG_COUNT=$#
if [[ -z "$BRANCH_NAME" ]] || [[ $ARG_COUNT == 0 ]] ; then
  usage
fi

CURRENT_BRANCH=$(git branch | egrep "^\*" | sed 's/.* //')
echo "Branching:"
echo "  to create: $BRANCH_NAME"
echo "  current:   $CURRENT_BRANCH"

INPUT_FILE_COUNT="$#"
MODIFIED_FILE_COUNT=$(git status | grep -cP "^\t*modified:")


COMMIT_FILE_COUNT=$INPUT_FILE_COUNT
if [ "$INPUT_FILE_COUNT" == 0 ]; then
  COMMIT_FILE_COUNT=$MODIFIED_FILE_COUNT
fi
echo "Files ($COMMIT_FILE_COUNT of $MODIFIED_FILE_COUNT modified):"


TMP_FILE=.filesToCommit.tmp
touch $TMP_FILE
while(($#)); do
  FILE_NAME=$1
  shift
  FILE_FOUND=$(find . -name "$FILE_NAME" -type f | tee -a $TMP_FILE)
  echo "  $FILE_NAME -> $FILE_FOUND"
done;


FILES_TO_COMMIT_COUNT=$(grep -c "" $TMP_FILE)
if [[ $FILES_TO_COMMIT_COUNT != 0 ]] && [[ $FILES_TO_COMMIT_COUNT != $INPUT_FILE_COUNT ]]; then
  echo "Error, found a duplicate file. Expected: $INPUT_FILE_COUNT, files but there were:  $FILES_TO_COMMIT_COUNT"
  echo "Displaying list of files found:"
  cat $TMP_FILE
  rm $TMP_FILE
  echo "ABORTING.."
  exit -1
fi


echo
read -p "Would you like to view diffs before commit (y/n) ?" -n 1 REPLY
echo

if [[ $REPLY =~ ^[Yy]$ ]]
then
  if [[ $FILES_TO_COMMIT_COUNT != 0 ]]; then
    while read line; do
      git diff $line
    done < $TMP_FILE
  else
    git diff
  fi
fi


read -p "Would you like to proceed with the commit? " -n 1 REPLY
echo

if [[ $REPLY =~ ^[Yy]$ ]]
then
  git checkout -b $BRANCH_NAME
  if [[ $FILES_TO_COMMIT_COUNT != 0 ]]; then
    git commit $(cat $TMP_FILE | tr '\n' ' ') 
    COMMIT_EXIT=$?
  else
    git commit
    COMMIT_EXIT=$?
  fi
else
  rm $TMP_FILE
  exit -1
fi


if [ $COMMIT_EXIT == 0 ]; then
  
  echo
  read -p "Would you like to push the new branch to origin (y/n)? " -n 1 REPLY
  echo

  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    git push origin $BRANCH_NAME
  fi

fi;

echo "Now switching back to the old branch: $CURRENT_BRANCH"
git checkout $CURRENT_BRANCH

echo
read -p "Would you like to delete the new branch ($BRANCH_NAME)?" -n 1 REPLY
echo

if [[ $REPLY =~ ^[Yy]$ ]]
then
  git branch -D $BRANCH_NAME
fi

rm $TMP_FILE
